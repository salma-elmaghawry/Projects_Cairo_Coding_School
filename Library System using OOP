#include <iostream>
#include <string>
#include <vector>
using namespace std;

class LibrarySystem {
private:
  vector<string> availableBooks;
  vector<string> borrowedBooks;

public:
  LibrarySystem() {
    availableBooks = {"7 Habits of Highly Effective People", "The Power of Now",
                      "atomic habits"};
  }

  void displayMenu() {
    cout << "\n========== Library System ==========\n";
    cout << "1. View Available Books\n";
    cout << "2. Borrow a Book\n";
    cout << "3. Return a Book\n";
    cout << "4. View My Borrowed Books\n";
    cout << "5. Add a Book to Library\n";
    cout << "6. Exit\n";
    cout << "Choose an option: ";
  }

  void viewAvailableBooks() {
    if (availableBooks.empty()) {
      cout << "No books available.\n";
      return;
    }
    cout << "\nAvailable Books:\n";
    for (int i = 0; i < availableBooks.size(); ++i) {
      cout << i + 1 << ". " << availableBooks[i] << "\n";
    }
  }

  void viewBorrowedBooks() {
    if (borrowedBooks.empty()) {
      cout << "You have not borrowed any books yet.\n";
      return;
    }
    cout << "\n Your Borrowed Books:\n";
    for (int i = 0; i < borrowedBooks.size(); ++i) {
      cout << i + 1 << ". " << borrowedBooks[i] << "\n";
    }
  }

  void borrowBook() {
    viewAvailableBooks();
    if (availableBooks.empty())
      return;

    int choice;
    cout << "Enter the number of the book you want to borrow: ";
    cin >> choice;

    if (choice < 1 || choice > availableBooks.size()) {
      cout << "Invalid choice.\n";
    } else {
      borrowedBooks.push_back(availableBooks[choice - 1]);
      availableBooks.erase(availableBooks.begin() + (choice - 1));
      cout << "Book borrowed successfully!\n";
    }
  }

  void returnBook() {
    viewBorrowedBooks();
    if (borrowedBooks.empty())
      return;

    int choice;
    cout << "Enter the number of the book to return: ";
    cin >> choice;

    if (choice < 1 || choice > borrowedBooks.size()) {
      cout << "Invalid choice.\n";
    } else {
      availableBooks.push_back(borrowedBooks[choice - 1]);
      borrowedBooks.erase(borrowedBooks.begin() + (choice - 1));
      cout << "Book returned successfully!\n";
    }
  }

  void addBook() {
    string bookName;
    cin.ignore(); 
    cout << "Enter the name of the new book: ";
    getline(cin, bookName);

    if (!bookName.empty()) {
      availableBooks.push_back(bookName);
      cout << "Book added to the library.\n";
    } else {
      cout << "Invalid name.\n";
    }
  }

  void start() {
    int option;
    for (;;) {
      displayMenu();
      cin >> option;

      switch (option) {
      case 1:
        viewAvailableBooks();
        break;
      case 2:
        borrowBook();
        break;
      case 3:
        returnBook();
        break;
      case 4:
        viewBorrowedBooks();
        break;
      case 5:
        addBook();
        break;
      case 6:
        cout << "Thanks for using the Library System. Goodbye\n";
        return; 
      default:
        cout << "Invalid option. Try again.\n";
      }
    }
  }
};


int main() {
  LibrarySystem system;
  system.start();
  return 0;
}
