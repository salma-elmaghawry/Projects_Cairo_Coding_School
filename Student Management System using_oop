#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Student {
public:
    int id;
    string name;
    vector<string> courses;

    Student(int id,  string& name) {
        this->id = id;
        this->name = name;
    }

    // Static vector to store all students
    static vector<Student> students;

    // Add student
    static void addStudent() {
        int id;
        string name;
        cout << "Enter student ID: ";
        cin >> id;
        cin.ignore(); // to handle newline
        cout << "Enter student name: ";
        getline(cin, name);
        students.push_back(Student(id, name));
        cout << "Student added successfully!\n";
    }

    // Delete student
    static void deleteStudent() {
        int id;
        cout << "Enter ID of student to delete: ";
        cin >> id;
        for (int i = 0; i < students.size(); ++i) {
            if (students[i].id == id) {
                students.erase(students.begin() + i);
                cout << "Student deleted successfully.\n";
                return;
            }
        }
        cout << "Student not found.\n";
    }

    // Find student by ID
    static Student* findStudentById(int id) {
        for (auto& student : students) {
            if (student.id == id)
                return &student;
        }
        return nullptr;
    }

    // Add course to student
    static void addCourse() {
        int id;
        cout << "Enter student ID to add course: ";
        cin >> id;
        cin.ignore();
        Student* s = findStudentById(id);
        if (s == nullptr) {
            cout << "Student not found.\n";
            return;
        }
        string course;
        cout << "Enter course name: ";
        getline(cin, course);
        s->courses.push_back(course);
        cout << "Course added successfully!\n";
    }

    // Display courses of a student
    static void displayCourses() {
        int id;
        cout << "Enter student ID to display courses: ";
        cin >> id;
        Student* s = findStudentById(id);
        if (s == nullptr) {
            cout << "Student not found.\n";
            return;
        }
        cout << "Courses for " << s->name << ":\n";
        for (int i = 0; i < s->courses.size(); ++i) {
            cout << i + 1 << ". " << s->courses[i] << endl;
        }
    }

    // Delete course from student
    static void deleteCourse() {
        int id;
        cout << "Enter student ID to delete course: ";
        cin >> id;
        Student* s = findStudentById(id);
        if (s == nullptr) {
            cout << "Student not found.\n";
            return;
        }
        displayCourses(); // show current courses
        int index;
        cout << "Enter course number to delete (1-based index): ";
        cin >> index;
        if (index >= 1 && index <= s->courses.size()) {
            s->courses.erase(s->courses.begin() + (index - 1));
            cout << "Course deleted successfully.\n";
        } else {
            cout << "Invalid course number.\n";
        }
    }

    // Display all students
    static void displayAllStudents() {
        if (students.empty()) {
            cout << "No students found.\n";
            return;
        }
        for (auto& s : students) {
            cout << "ID: " << s.id << ", Name: " << s.name << endl;
        }
    }
};

// Define static member
vector<Student> Student::students;

// Main menu
int main() {
    int choice;
    do {
        cout << "\n==== Student Management System ====\n";
        cout << "1. Add Student\n";
        cout << "2. Delete Student\n";
        cout << "3. Add Course to Student\n";
        cout << "4. Display Courses of a Student\n";
        cout << "5. Delete Course from Student\n";
        cout << "6. Display All Students\n";
        cout << "0. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
        case 1:
            Student::addStudent();
            break;
        case 2:
            Student::deleteStudent();
            break;
        case 3:
            Student::addCourse();
            break;
        case 4:
            Student::displayCourses();
            break;
        case 5:
            Student::deleteCourse();
            break;
        case 6:
            Student::displayAllStudents();
            break;
        case 0:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }
    } while (choice != 0);

    return 0;
}
