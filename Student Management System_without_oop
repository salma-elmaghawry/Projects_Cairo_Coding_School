#include <iostream>
#include <string>
#include <vector>
using namespace std;

struct Student {
  int id;
  string name;
  vector<string> courses;
};

vector<Student> students;

void addStudent() {
  Student s;
  cout << "Enter ID: ";
  cin >> s.id;
  cout << "Enter name: ";
  cin.ignore();
  getline(cin, s.name);
  students.push_back(s);
  cout << "Student added successfully.\n";
}

Student *findStudentById(int id) 
{
  for (Student &student : students) {
    if (student.id == id)
      return &student;
  }
  return nullptr;
}


void deleteStudent() {
    int id;
    cout << "Enter ID of student to delete: ";
    cin >> id;

    for (int i = 0; i < students.size(); i++) {
        if (students[i].id == id) {
            students.erase(students.begin() + i);
            cout << "Student deleted successfully.\n";
            return;
        }
    }
    cout << "Student not found.\n";
}


void addCourse() {
  int id;
  cout << "Enter student ID: ";
  cin >> id;
  Student *student = findStudentById(id);
  if (!student) {
    cout << "Student not found.\n";
    return;
  }
  string course;
  cout << "Enter course name to add: ";
  cin.ignore();
  getline(cin, course);
  student->courses.push_back(course);
  cout << "Course added successfully.\n";
}

void displayCourses() {
  int id;
  cout << "Enter student ID: ";
  cin >> id;
  Student *student = findStudentById(id);
  if (!student) {
    cout << "Student not found.\n";
    return;
  }
  cout << "Courses for " << student->name << ":\n";
  for ( string  &c : student->courses) {
    cout << "- " << c << endl;
  }
}

void deleteCourse() {
  int id;
  cout << "Enter student ID: ";
  cin >> id;
  Student *student = findStudentById(id);
  if (!student) {
    cout << "Student not found.\n";
    return;
  }
  string course;
  cout << "Enter course name to delete: ";
  cin.ignore();
  getline(cin, course);

  for (auto it = student->courses.begin(); it != student->courses.end(); ++it) {
    if (*it == course) {
      student->courses.erase(it);
      cout << "Course deleted.\n";
      return;
    }
  }
  cout << "Course not found.\n";
}

void displayAllStudents() {
  if (students.empty()) {
    cout << "No students available.\n";
    return;
  }
  for ( Student &s : students) {
    cout << "ID: " << s.id << ", Name: " << s.name << ", Courses: ";
    if (s.courses.empty()) {
      cout << "None";
    } else {
      for ( string &c : s.courses) {
        cout << c << " ";
      }
    }
    cout << endl;
  }
}

void menu() {
  int choice;
  do {
    cout << "\n====== Student Management System ======\n";
    cout << "1. Add Student\n";
    cout << "2. Delete Student\n";
    cout << "3. Add Course to Student\n";
    cout << "4. Display Courses of a Student\n";
    cout << "5. Delete Course from Student\n";
    cout << "6. Display All Students\n";
    cout << "7. Exit\n";
    cout << "Choose an option (1-7): ";
    cin >> choice;

    switch (choice) {
    case 1:
      addStudent();
      break;
    case 2:
      deleteStudent();
      break;
    case 3:
      addCourse();
      break;
    case 4:
      displayCourses();
      break;
    case 5:
      deleteCourse();
      break;
    case 6:
      displayAllStudents();
      break;
    case 7:
      cout << "Goodbye!\n";
      break;
    default:
      cout << "Invalid option.\n";
    }
  } while (choice != 7);
}

int main() {
  menu();
  return 0;
}
